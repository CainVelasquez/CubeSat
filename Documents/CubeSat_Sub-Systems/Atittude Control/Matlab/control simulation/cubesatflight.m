function [ out ] = cubesatflight(t,in)
% This function evaluates a cubesat's flight and determines it's transient
% behavior based upon a passive magnetic stabilization system
% All work based upon Gerhardt and Palo 2010 paper

out = ones(6,1);
%% Constants
%Important values
mu0 = 1.256637e-6; %Vaccuum permeability
AeroTorque = 8e-8; % value for a 3U sattelite from Gerhardt&Palo
GravTorque = 6e-8;
RadTorque = 1e-8;
OuterTorques = [AeroTorque GravTorque RadTorque];
OuterTorqueRMS = rms(OuterTorques);
Hcapp = 12; % Apparent Hc (A/m) accounting for permeability of rod material (HyMu-80)
Brapp = 0.004; % Apparent magnetic remanence (Tesla)
Bsapp = 0.025; % Apparent saturation magnetic field (Tesla)
Hc = 0.96; % Material Hc (A/m)
Br = 0.35; % Material magnetic remanence (Tesla)
Bs = 0.74; % Material saturation magnetic field (Tesla)

% Orbit-determined constants
pointAcc = 10*pi/180; %desired pointing accuracy in radians
Bmin = 2e-5; % minimum field strength encountered during orbit(Tesla)
mbar = 10 * OuterTorqueRMS/(Bmin*sin(pointAcc)); % reccomended barmagnet strength in A*m^2
Beq = 2.3e-5; % magnetic flux density at earth equator(Tesla)
i = 55; % orbit inclination

%SOCRATES Moments of inertia
% %Moments of intetia in g-mm^2
% Ixx = 1814876.01;
% Iyy = 2366880.89;
% Izz = 2609224.68;
% 
% %convert to convential kg-m^2
% Ixx = Ixx/(1000*(1000*1000));
% Iyy = Iyy/(1000*(1000*1000));
% Izz = Izz/(1000*(1000*1000));

%CSSWE Moments of inertia for testing purposes
Ixx = 0.00551;
Iyy = 0.02552;
Izz = 0.02565;

%% Begin calculations

%ECF orientation/euler angles
theta1 = in(1);%x
theta2 = in(2);%y
theta3 = in(3);%z

%sines and cosines of the euler angles
s1 = sin(theta1);
s2 = sin(theta2);
s3 = sin(theta3);
c1 = cos(theta1);
c2 = cos(theta2);
c3 = cos(theta3);

%body-fixed angular velocities
wx = in(4);
wy = in(5);
wz = in(6);

%change in euler angles
thetadot = (1/c2).*[0 s3 c3; 0 c3*c2 -1*s3*c2; c2 s3*s2 c3*s2]*[wx; wy; wz];

%Find the magnetic field observed by the cubesat. NOTE: The magfieldvector
%function must be independently altered for whatever orbit you plan to test
%the cubesat flight at.
HEarthCenteredPresent = MagFieldVector(t);
HEarthCenteredPast = MagFieldVector(t-0.1);
HEarthCenteredFuture = MagFieldVector(t+0.1);
HSatCenteredPres = [(c2*c1) (c2*s1) (-1*s2); ((s3*s2*c1)-(c3*s1)) (s3*s2*s1)+(c3*c1) s3*c2; (c3*s2*c1)+(s3*s1) ((c3*s2*s1)-(s3*c1)) c3*c2]*HEarthCenteredPresent';
HSatCenteredPast = [(c2*c1) (c2*s1) (-1*s2); ((s3*s2*c1)-(c3*s1)) (s3*s2*s1)+(c3*c1) s3*c2; (c3*s2*c1)+(s3*s1) ((c3*s2*s1)-(s3*c1)) c3*c2]*HEarthCenteredPast';
HSatCenteredFuture = [(c2*c1) (c2*s1) (-1*s2); ((s3*s2*c1)-(c3*s1)) (s3*s2*s1)+(c3*c1) s3*c2; (c3*s2*c1)+(s3*s1) ((c3*s2*s1)-(s3*c1)) c3*c2]*HEarthCenteredFuture';
BSatCentered = HSatCenteredPres.*1.256e-6;

%% Determine Bhyst
% Magnetic flux induced in hysteresis rods based on L=9.5mm and
% D=1mm, Hs = 100A*m^2, uhys(Hs) = 1.5e4
% CONSTANTS
Bhyst_saturation = 0.0268; % (Tesla)
Vhyst = 0.095*pi*0.0001*0.0001;% volume of a hysteresis rod
p=(1/Hcapp)*tan((pi*Brapp)/(2*Bsapp));

% Determine dhdt within the vector of each rod
dhdt_y = HSatCenteredFuture(2)-HSatCenteredPast(2);
dhdt_z = HSatCenteredFuture(3)-HSatCenteredPast(3);


% Compute Bhyst
if dhdt_y >= 0
    BHyst_y = (2/pi)*Bsapp*atan(p*(HSatCenteredPres(2)-Hcapp));
elseif dhdt_y < 0
    BHyst_y = (2/pi)*Bsapp*atan(p*(HSatCenteredPres(2)+Hcapp));
end

if dhdt_z >= 0
    Bhyst_z = (2/pi)*Bsapp*atan(p*(HSatCenteredPres(3)-Hcapp));
elseif dhdt_z < 0
    Bhyst_z = (2/pi)*Bsapp*atan(p*(HSatCenteredPres(3)+Hcapp));
end
% determine magnetic moment of each hysteresis rods
mhyst_y = (BHyst_y*Vhyst)/mu0;
mhyst_z = (Bhyst_z*Vhyst)/mu0;

Nrods = 2; % Number of hysteresis rods on each damped axis

SatMom = ones(1,3);
SatMom(1) = mbar;
SatMom(2) = Nrods*mhyst_y;
SatMom(3) = Nrods*mhyst_z;

% Determine external torques generated by magnetic forces from the bar
% magenet and the two hysteresis rods
% T = m X B
L = cross(SatMom,BSatCentered);

%change in angular velocities
wdotx = (1/Ixx)*((-1*(Izz-Iyy)*wy*wz) + L(1));
wdoty = (1/Iyy)*((-1*(Ixx-Izz)*wy*wz) + L(2));
wdotz = (1/Izz)*((-1*(Iyy-Ixx)*wy*wz) + L(3));


%% Output delta-values
out(1) = thetadot(1);
out(2) = thetadot(2);
out(3) = thetadot(3);
out(4) = wdotx;
out(5) = wdoty;
out(6) = wdotz;


end